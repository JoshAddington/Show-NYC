import os
import urllib2
import zipfile
from StringIO import StringIO

from django.template.loader import render_to_string
from django.conf.urls import patterns, url
from django.contrib import admin, messages
from django.http import HttpResponseRedirect, HttpResponse
from django.shortcuts import render
from .models import Campaign
from .forms import CampaignAdminForm
from images.models import Image
from kiosk_cms import settings



# Image list for campaign admin page
class ImageInline(admin.TabularInline):
    model = Image
    fields = ('thumb', 'user_id', 'score', 'active', 'flagged', 'campaign_winner')
    readonly_fields = ('thumb', 'user_id')

    # image thumbnail for image list
    def thumb(self, obj):
        if obj.image:
            return u'<a href="%s"><img src="%s" width=80 height=80 /></a>' % (obj.image.url, obj.image.url)
        else:
            return u'No image file found'
    thumb.short_description = 'Image'
    thumb.allow_tags = True


# Campaign admin page
# list_display is a list of fields that show on the campaign list page
# the form controls how the campaign detail page works
# ImageInline shows each of the images in the campaign under the campaign details
class CampaignAdmin(admin.ModelAdmin):
    list_display = ('name', 'active', 'next_active', 'default_campaign', 'start_date', 'end_date')
    inlines = [ImageInline, ]
    prepopulated_fields = {'slug': ('name',), }
    form = CampaignAdminForm

    # adds the url from the 'Generate Kiosk Template' button
    # to campaign admin urls
    def get_urls(self):
        urls = super(CampaignAdmin, self).get_urls()
        my_urls = patterns('',
            (r'^(?P<pk>[0-9]+)/template/$', self.generate_template)
        )
        return my_urls + urls


    def send_zipfile(self, request, context=None):
        """                                                                         
        Create a ZIP file on disk and transmit it in chunks of 8KB,
        without loading the whole file into memory. ZIP file contains
        a folder app/ with the index.html file in pages/ and approriate images
        for the active campaign in img/.
        """
        page = render_to_string('template.html', {'campaign': context['campaign'],
                        'next_campaign': context['next_campaign'],
                        'winning_image': context['winning_image'],
                        'top_images': context['top_images']}).encode('utf-8')

        readme = render_to_string('kiosk.md').encode('utf-8')

        f = StringIO()
        zip = zipfile.ZipFile(f, 'w')
        zip.writestr('app/pages/index.html', page)
        zip.writestr('app/generate-readme.md', readme)

        for image in context['top_images']:
            url = urllib2.urlopen(settings.MEDIA_URL+str(image.image.name))
            zip.writestr('app/img/'+image.image.name, url.read())
        url = urllib2.urlopen(settings.MEDIA_URL+str(context['next_campaign'].stock_image.name))
        zip.writestr('app/img/'+context['next_campaign'].stock_image.name, url.read())
        url = urllib2.urlopen(settings.MEDIA_URL+str(context['winning_image'].image.name))
        zip.writestr('app/img/'+context['winning_image'].image.name, url.read())
        zip.close() # Close
        response = HttpResponse(f.getvalue(), content_type="application/zip")
        response['Content-Disposition'] = 'attachment; filename=kiosk.zip'
        return response


    # Generates the kiosk template for the selected campaign.
    # Template is generated by loading the first image marked as campaign
    # winner on the first page, and the 6 highest voted active images not marked as
    # campaign winners on the second page.
    # Includes the next active campaign on the third page of the
    # kiosk tempalte.
    def generate_template(self, request, pk):
        campaign = Campaign.objects.get(pk=pk)
        next_campaign = Campaign.objects.filter(next_active=True).select_related()
        winning_image = Image.objects.filter(campaign_winner=True).filter(campaign_id=pk).select_related()
        top_images = Image.objects.filter(campaign_winner=False).filter(active=True).filter(campaign_id=pk).order_by('-score').only('image')[:6]
        if next_campaign:
            if winning_image:
                if len(top_images) == 6:
                    return self.send_zipfile(request, context={
                        'next_campaign': next_campaign[0],
                        'campaign': campaign,
                        'winning_image': winning_image[0],
                        'top_images': top_images
                    })
                else:
                    messages.error(request, "The campaign must have 6 active images in order to generate the template.")
            else:
                messages.error(request, "An image must be marked as the campaign winner to generate the template.")

        else:
            if not winning_image:
                messages.error( request, "An image must be marked as the campaign winner to generate the template.")
            messages.error(request, "A campaign must be marked as next active in order to generate the template.")
        return HttpResponseRedirect('..')

    class Media:
        js = ('js/kiosk_template.js',)


# Register your models here.
admin.site.register(Campaign, CampaignAdmin)
